library(GSVA)
library(TCGAbiolinks)
library(ComplexHeatmap)
library(dplyr)
library(stringr)
library(rtracklayer)
library(SummarizedExperiment)
library(clusterProfiler)
library(RColorBrewer)
library(maftools)
library(circlize)
library(matrixStats)
library(GetoptLong)
library(GenomicRanges)
library (plyr)
library(ConsensusClusterPlus)
load("used_metabolism_signature.Rdata")
#df <- ldply (signature_metabolism, data.frame)
#write.csv(df,"signature_metabolism.csv")

##
tcga_expr=read.csv("GSE71729_exp.csv",row.names = 1)

# 
mingenecounts <- 2
print(lapply(signature_metabolism,function(x) summary(x%in%rownames(tcga_expr))))
signature <- signature_metabolism[lapply(signature_metabolism,function(x) sum(x%in%rownames(tcga_expr)==TRUE)) >= mingenecounts]

# ssGSEA
tcga_gsva <- as.data.frame(t(gsva(as.matrix(tcga_expr), signature, method = "ssgsea")))
str(tcga_gsva)
write.csv(tcga_gsva,"metabolism_GSE71729.csv")

exprSet=as.data.frame(t(tcga_gsva)) ## 
exprSet=as.data.frame(exprSet)
write.csv(exprSet,"allexprset.csv")
pdata =read.csv("GSE71729_pdata.csv",row.names = 1) ## 
colnames(pdata) ## 

pdata[,1]   ## 
group_list = as.character(pdata[, 1])  ## 

dim(exprSet) ##
group_list=factor(group_list)
table(group_list) ## 
##
boxplot(exprSet,outline=FALSE, notch=T,col=group_list, las=2) ##
#
library(limma)
exprSet=normalizeBetweenArrays(exprSet)
boxplot(exprSet,outline=FALSE, notch=T,col=group_list, las=2)

##
##
ex <- exprSet
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
  (qx[6]-qx[1] > 50 && qx[2] > 0) ||
  (qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)

if (LogC) { ex[which(ex <= 0)] <- NaN
exprSet <- log2(ex)
print("log2 transform finished")}else{print("log2 transform not needed")}


{
  cancer_expr = exprSet[, grep("T", group_list)]# 
  write.csv(cancer_expr,"cancer_exp.csv")
  normal_expr = exprSet[, grep("N", group_list)] #
  write.csv(normal_expr,"normal_exp.csv")
  exprSet=cbind(cancer_expr, normal_expr)  ## 合并
 }


##
#install.packages("DMwR")
library(DMwR)
anyNA(exprSet)##
knnOutput <- knnImputation(exprSet)
anyNA(knnOutput) 
#head(knnOutput)
exprSet=as.data.frame(knnOutput)
############### 样本分组
group_list = c(rep('tumor_tissue',ncol(cancer_expr)),    ## 1:265
               rep('normal_tissue', ncol(normal_expr)))
exprSet=as.data.frame(exprSet)
## rep('not_TN',ncol(not_TN_expr))：
## rep('TN', ncol(TN_expr))：
save( exprSet, group_list, file = 'exprSet_by_group.Rdata')  

write.csv(exprSet,"exprSet.csv")

##
##install.packages('ggfortify')  
library(ggfortify)  ## 
data = as.data.frame(t(exprSet))   ## 20 obs. of 21755 variables
data$group = group_list            ## 20obs. of 21756 variables
png('pca_plot.png', res=100)  ## 
autoplot(prcomp(data[, 1:(ncol(data)-1)]), data = data, colour = 'group') + theme_bw()  ## 加灰色背景
dev.off()  ## 


##
exp=exprSet
table(group_list)
table(design)
suppressMessages(library(limma))
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <- colnames(exprSet)
contrast.matrix <- makeContrasts(paste0(unique(group_list),collapse = "-"),levels = design)
##step1
dim(design)
fit <- lmFit(exprSet,design)
##step2
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2 <- eBayes(fit2) ## default no trend !!!
##step3
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG = na.omit(tempOutput)
write.csv(nrDEG,"GSE71729_metabolism_diff_results.csv",quote = F)

##
allDiff <- nrDEG
diff=allDiff
padj=0.05#
foldChange=0##FC自行设定
#write.csv(a, "DEG_name.csv")
diffSig = diff[(diff$P.Value < padj & (diff$logFC>foldChange | diff$logFC<(-foldChange))),]#
#write.table(diffSig, file="diffSig.xls",sep="\t",quote=F)#
write.csv(diffSig, "diffSig.csv")
diffUp = diff[(diff$P.Value < padj & (diff$logFC>foldChange)),]#foldchange>0是上调，foldchange<0是下调#
#write.table(diffUp, file="up.xls",sep="\t",quote=F)#
write.csv(diffUp, "diffUp.csv")
diffDown = diff[(diff$P.Value < padj & (diff$logFC<(-foldChange))),]
#write.table(diffDown, file="down.xls",sep="\t",quote=F)
write.csv(diffDown, "diffDown.csv")

library(stringr)
library(pheatmap)
library(gplots)
library(grid)
Sys.setenv(LANGUAGE = "en") 
options(stringsAsFactors = FALSE) 

# 
display.progress = function (index, totalN, breakN=20) {
  
  if ( index %% ceiling(totalN/breakN)  ==0  ) {
    cat(paste(round(index*100/totalN), "% ", sep=""))
  }
  
} 

# 
cross_subtype_compr <- function(expr = NULL,
                                subt = NULL,
                                subt.label = "Subtype",
                                two_sam_compr_method = "wilcox",
                                multi_sam_compr_method = "kruskal",
                                res.path = NULL) {
  
  if (!is.element(two_sam_compr_method, c("t.test", "wilcox"))) {stop("Two samples comparison should be t.test or wilcox!\n") }
  if (!is.element(multi_sam_compr_method, c("anova", "kruskal"))) {stop("multiple samples comparison should be kruskal or anova!\n") }
  
  subt.name <- unique(subt[,subt.label])
  n.subt <- length(subt.name)
  if(n.subt < 2) {stop("The number of subtype should be greater than 2!\n")}
  
  comprTab <- NULL
  
  # 
  if(n.subt == 2 & two_sam_compr_method == "wilcox") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp1 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[1]),,drop = F])])
      tmp2 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[2]),,drop = F])])
      wt <- wilcox.test(tmp1,tmp2)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = wt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 
  if(n.subt == 2 & two_sam_compr_method == "t.test") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp1 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[1]),,drop = F])])
      tmp2 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[2]),,drop = F])])
      tt <- t.test(tmp1,tmp2)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = tt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 
  if(n.subt > 2 & multi_sam_compr_method == "kruskal") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp.list <- list()
      for (n in 1:n.subt) {
        tmp.list[[n]] <- data.frame(value = as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[n]),,drop = F])]),
                                    subt = subt.name[n],
                                    stringsAsFactors = F)
      }
      tmp <- do.call(rbind,tmp.list)
      kt <- kruskal.test(value ~ subt,data = tmp)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = kt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 
  if(n.subt > 2 & multi_sam_compr_method == "anova") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp.list <- list()
      for (n in 1:n.subt) {
        tmp.list[[n]] <- data.frame(value = as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[n]),,drop = F])]),
                                    subt = subt.name[n],
                                    stringsAsFactors = F)
      }
      tmp <- do.call(rbind,tmp.list)
      at <- summary(aov(value ~ subt,data = tmp))
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = at[[1]][1,5],
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 
  comprTab$adjusted.p.value = p.adjust(comprTab$nominal.p.value,method = "BH")
  # 
  #comprTab <- comprTab[order(comprTab$adjusted.p.value, decreasing = F),] 
  
  write.table(comprTab,file.path(res.path,"comprTab.txt"),sep = "\t",row.names = F,quote = F)
  return(comprTab)
}


exp_data=exprSet

# 
#mygene <- read.table("easy_input_gene.txt")$V1
mygene=read.csv("gene.csv")
#mygene=mygene$gene
# 
#exp_data=as.data.frame(exprSet)
exprSet2 = exp_data[rownames(exp_data) %in% mygene[,1],] 
#mygene_data <- exp_data[mygene, ]
mygene_data=exprSet
#tcga.expr=mygene_data

write.csv(mygene_data,"driven_gene_exp.csv")

targetSample <- as.vector(str_replace_all(colnames(mygene_data),"[.]","-"))##要将这个转为向量。
colnames(mygene_data)=targetSample  
#a=rownames(tcga.expr)

## 
Subtype <- read.csv("immune_cell_group_os.csv",row.names = 2)
Subtype=as.data.frame(pdata)
#rownames(Subtype)=rownames(pdata)
# 
colnames(Subtype)[1]="Subtype"
#Subtype=as.data.frame(Subtype[,-1])
table(Subtype$Subtype)

## 
com_sam <- intersect(colnames(mygene_data),rownames(Subtype))
mygene_data <- mygene_data[,com_sam]
Subtype <- Subtype[com_sam,,drop = F]
head(Subtype)

## 
comprTab <- cross_subtype_compr(expr = mygene_data, # 
                                subt = Subtype,
                                two_sam_compr_method = "t.test", # 两组"t.test", "wilcox"
                                #multi_sam_compr_method = "kruskal", # 多组"anova", "kruskal"
                                res.path = ".")
write.csv(comprTab,"GSE71729_METABOLIS_diff.csv")
# 
n.show_top_gene <- nrow(mygene_data)
# 或者取top 20个基因来画
#n.show_top_gene <- 20 

# 按分组排序
subt.order <- Subtype[order(Subtype$Subtype),,drop = F]
indata <- mygene_data[comprTab$gene[1:n.show_top_gene],rownames(subt.order)]
class(indata)

#
write.csv(indata,"indata.csv")
indata=read.csv("indata.csv",row.names = 1)
# 

# 
plotdata <- t(scale(t(indata)))
plotdata[plotdata > 2] <- 2
plotdata[plotdata < -2] <- -2

# 
blank <- "    " # 
p.value <- comprTab$adjusted.p.value[1:n.show_top_gene]
sig.label <- ifelse(p.value < 0.001,"****",
                    ifelse(p.value < 0.005,"***",
                           ifelse(p.value < 0.01,"**",
                                  ifelse(p.value < 0.05,"*",""))))
p.label <- formatC(p.value, # 
                   format = "e",##
                   digits = 2)

add.label <- str_pad(paste0(rownames(plotdata),sig.label), # 
                     max(nchar(paste0(rownames(plotdata),sig.label))), 
                     side = "right")

annCol <- subt.order # 
colnames(annCol)[1] <- paste(str_pad(colnames(annCol)[1], 
                                     max(nchar(paste0(rownames(plotdata),sig.label))), 
                                     side = "right"),
                             "P-value",
                             sep = blank)
table(Subtype$Subtype)
#annColors <- list(c("Normal"="blue", "Cancer"="darkgreen"))
annColors <- list(c("T"="red","N"="blue" )) # 
names(annColors) <- colnames(annCol)[1] # 

class(plotdata)


# 
pheatmap(cellheight = 15, cellwidth = 10,
         mat = plotdata, # 
         color = colorRampPalette(c("#9933CC", "#CCCCFF", "red"))(100),
         scale = "none", # 
         annotation_col = annCol, # 
         annotation_colors = annColors, # 
         cluster_cols = F, # 
         kmeans_3 = T,
         cluster_rows = T, # 
         show_colnames = F, # 
         show_rownames = T, # 
         annotation_legend = F, # 
         labels_row = paste(add.label, p.label, sep=blank), # 
         fontfamily = "mono", # 
         #gaps_col = c(173), # 
         filename = "heatmapPvalue6.pdf")
?pheatmap






my_data <- na.omit(tcga_gsva)
##
data2 = sweep(tcga_gsva,1, apply(tcga_gsva,1,median,na.rm=T))
## STEP1: Consensus clustering of the pairwise correlation of cancer immune gene expression signature scres
#data2 <- my_data[,-1]
dim(data2)
data2=as.data.frame(t(data2))
data2 <- as.matrix(data2)
##
res <- ConsensusClusterPlus(data2, maxK = 9, reps = 1000, 
                            pItem = 0.8, pFeature = 1, title="step01",
                            clusterAlg = 'km', distance="euclidean",##
                            seed=123456,
                            plot="pdf", #或"png"
                            corUse="pairwise.complete.obs",writeTable=T)

##
res2 <- ConsensusClusterPlus(data2, maxK = 9, reps = 1000, 
                             pItem = 0.8, pFeature = 1, title="step02",
                             clusterAlg = 'km', distance="euclidean",##
                             seed=123456,
                             plot="pdf", #或"png"
                             innerLinkage = "ward.D", finalLinkage = "ward.D",
                             corUse="pairwise.complete.obs",writeTable=T)

??ConsensusClusterPlus
